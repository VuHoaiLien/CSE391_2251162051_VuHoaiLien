import React, { useState, useEffect } from 'react';
import './style.css';
import { v4 as uuidv4 } from 'uuid';

const EMPTY_FORM = { id: '', ho: '', ten: '', diachi: '' };

function App() {
  const [students, setStudents] = useState(() => {
    try {
      const saved = localStorage.getItem('students');
      const parsed = saved ? JSON.parse(saved) : [];
      // ƒê·∫£m b·∫£o m·∫£ng h·ª£p l·ªá
      return Array.isArray(parsed) ? parsed : [];
    } catch {
      return [];
    }
  });

  const [form, setForm] = useState(EMPTY_FORM);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    localStorage.setItem('students', JSON.stringify(students));
  }, [students]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const validateForm = () => {
    const ho = form.ho.trim();
    const ten = form.ten.trim();
    const diachi = form.diachi.trim();

    if (!ho || !ten || !diachi) {
      alert('Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng c√°c tr∆∞·ªùng!');
      return false;
    }
    if (ten.length > 15) {
      alert('T√™n kh√¥ng ƒë∆∞·ª£c qu√° 15 k√Ω t·ª±!');
      return false;
    }
    if (ho.length > 20) {
      alert('H·ªç ƒë·ªám kh√¥ng ƒë∆∞·ª£c qu√° 20 k√Ω t·ª±!');
      return false;
    }
    if (diachi.length > 50) {
      alert('ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±!');
      return false;
    }
    return true;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    const clean = {
      ...form,
      ho: form.ho.trim(),
      ten: form.ten.trim(),
      diachi: form.diachi.trim(),
    };

    if (clean.id) {
      // c·∫≠p nh·∫≠t
      setStudents((prev) => prev.map((s) => (s.id === clean.id ? clean : s)));
    } else {
      // th√™m m·ªõi
      setStudents((prev) => [...prev, { ...clean, id: uuidv4() }]);
    }
    setForm(EMPTY_FORM);
  };

  const handleEdit = (student) => {
    // copy sang form (tr√°nh tham chi·∫øu)
    setForm({
      id: student.id || '',
      ho: student.ho || '',
      ten: student.ten || '',
      diachi: student.diachi || '',
    });
  };

  const handleDelete = (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√°?')) {
      setStudents((prev) => prev.filter((s) => s.id !== id));
      // n·∫øu ƒëang edit ch√≠nh record n√†y th√¨ reset form
      setForm((f) => (f.id === id ? EMPTY_FORM : f));
    }
  };

  const norm = (v) => (v || '').toLowerCase();
  const term = searchTerm.toLowerCase();

  const filtered = students.filter(
    (s) =>
      norm(s.ho).includes(term) ||
      norm(s.ten).includes(term) ||
      norm(s.diachi).includes(term) // th√™m l·ªçc theo ƒë·ªãa ch·ªâ cho ti·ªán
  );
  return (
    <div className="app">
      <h1>Qu·∫£n l√Ω Sinh vi√™n</h1>

      <input
        type="text"
        placeholder="T√¨m ki·∫øm theo h·ªç ƒë·ªám, t√™n, ƒë·ªãa ch·ªâ..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />

      <div className="main-layout">
        {/* C·ªôt tr√°i: Danh s√°ch */}
        <div className="student-list">
          <h2>Danh s√°ch sinh vi√™n</h2>
          <table>
            <thead>
              <tr>
                <th>STT</th>
                <th>H·ªç ƒë·ªám</th>
                <th>T√™n</th>
                <th>ƒê·ªãa ch·ªâ</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {filtered.length === 0 ? (
                <tr>
                  <td colSpan="5" style={{ textAlign: 'center' }}>
                    Kh√¥ng c√≥ d·ªØ li·ªáu
                  </td>
                </tr>
              ) : (
                filtered.map((s, i) => (
                  <tr key={s.id}>
                    <td>{i + 1}</td>
                    <td>{s.ho}</td>
                    <td>{s.ten}</td>
                    <td>{s.diachi}</td>
                    <td>
                      <button className="button button--edit" onClick={() => handleEdit(s)}>‚úèÔ∏è</button>
                      <button className="button button--delete" onClick={() => handleDelete(s.id)}>üóëÔ∏è</button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        {/* C·ªôt ph·∫£i: Form */}
        <div className="form-wrapper">
          <h3>Th√™m / C·∫≠p nh·∫≠t sinh vi√™n</h3>
          <form onSubmit={handleSubmit}>
            <table>
              <tbody>
                <tr>
                  <td>H·ªç ƒë·ªám:</td>
                  <td><input name="ho" value={form.ho} onChange={handleChange} /></td>
                </tr>
                <tr>
                  <td>T√™n:</td>
                  <td><input name="ten" value={form.ten} onChange={handleChange} /></td>
                </tr>
                <tr>
                  <td>ƒê·ªãa ch·ªâ:</td>
                  <td><input name="diachi" value={form.diachi} onChange={handleChange} /></td>
                </tr>
                <tr>
                  <td colSpan="2" style={{ textAlign: 'center' }}>
                    <button type="submit">{form.id ? 'üíæ L∆∞u' : '‚ûï Th√™m'}</button>
                    {form.id && (
                      <button type="button" className="button button--muted" onClick={() => setForm(EMPTY_FORM)}>
                        H·ªßy
                      </button>
                    )}
                  </td>
                </tr>
              </tbody>
            </table>
          </form>
        </div>
      </div>
    </div>
  );
}

export default App;
